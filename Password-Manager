# _*_ coding:utf8 _*_ 
'''
密码管理器: 
* 保存密码
* 取密码

密码数据保存格式: 

{ category: { title : value1} }

{
  'web' : {"chenfanlinux": {"user":"chenfan","passwd":"123456","url": "www.chenfanlinux.org"},
           "zhihu": {"user": "chenfan","passwd": "123456","url" : "www.zhihu.com"}
          },

 'server' :
          { "nginx":{ "user": "root","passwd": "123456","hostname": "localhost","ip": "127.0.0.1"},

            "tomcat":{"user": "chenfan","passwd": "123" ,"hostname": "tomcat01","ip" : "192.168.0.1"}
          }

}

* 密码存取方式:
    * 写密码
      python zpass.py w 
               user_choise ---> 1(web),2(server),0(退出)

      python zpass.py r category title


'''
import pickle
import sys
import pprint
import argparse
import string
import random


parser = argparse.ArgumentParser()
parser.add_argument('-m', action='store', dest='method', 
                    help='操作方式 w:写密码, r查找密码, g: 生成密码')
parser.add_argument('-c', action='store', dest='category', 
                    help='类别')
parser.add_argument('-i', action='store', dest='title',
                    help='查找的名称')
parser.add_argument('-l', type = int, action='store', dest='length',
                    help='密码长度')

args = parser.parse_args()

def select_db():
    try:
        with open ('passwd.zpass','rb') as f:
            return pickle.load(f)
    except IOError:
        return False
    except Exception as e:
        raise e


def insert_db(user_data):
    try:
        with open('passwd.zpass', 'wb') as f:
            pickle.dump(user_data, f)
    except IOError:
        return False
    except Exception as e:
        raise e
    return True

class Password(dict):
    def __init__(self, category, title, user, passwd):
        super().__init__()
        self.title = title
        self.category = category
        self[title] = {'user': user, 'passwd': passwd}
    @staticmethod
    def get_passwd():
        passwd_data = select_db() if select_db()  else {}
        return passwd_data.get(args.category).get(args.title)
    def save_passwd(self):
        passwd_data = select_db() if select_db()  else {}
        if not passwd_data or self.category not in passwd_data:
            passwd_data[self.category] = {}
        passwd_data[self.category][self.title] = self[self.title]
        pprint.pprint(passwd_data)
        insert_status = insert_db(passwd_data)
        if not insert_status:
            print("保存失败")
        return True
    @classmethod
    def get_item(cls):
        cls.item = ['title', 'user', 'passwd']
        return cls.item

class WebPassword(Password):
    def __init__(self, category, title, user, passwd,url):
        super().__init__(category, title, user, passwd)
        self[title]['url'] = url
    @classmethod
    def get_item(cls):
        super().get_item()
        cls.item.append('url')
        return cls.item

class ServerPassWord(Password):
    def __init__(self, category, title, user, passwd, hostname, ip):
        super().__init__(category, title, user, passwd)
        self[title]['hostname'] = hostname
        self[title]['ip'] = ip

    @classmethod
    def get_item(cls):
        super().get_item()
        cls.item.append('hostname')
        cls.item.append('ip')
        return cls.item


def handle_passwd():
    passwd_args = {}
    user_choice = input("1 web, 2 server, 0 退出")
    pwd_class =  {
    '1' : ('web', WebPassword),
    '2' : ('server', ServerPassWord) 
    }  
    category = pwd_class[user_choice][0]
    handle_class = pwd_class[user_choice][1]
    for i in handle_class.get_item():
        passwd_args[i] = input(i + ":")
    pwd = handle_class(category=category, **passwd_args)
    stat = pwd.save_passwd()
    if stat is False:
        print('保存失败!')
    print('保存成功!')

def gen_passwd(length):
    chars = string.ascii_letters + string.digits + "!@#$%^&*():"
    return ''.join([random.choice(chars) for  i in range(length)])

def main():
    if args.method == 'r':
        print(Password.get_passwd())
    elif args.method == 'w':
        handle_passwd()
    elif args.method == 'g':
        print(gen_passwd(args.length))
    else:
        print('退出')


if __name__ == '__main__':
    main()









